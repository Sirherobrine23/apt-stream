#!/usr/bin/env node
import { getConfig, saveConfig } from "./repoConfig.js";
import { writeFile } from "node:fs/promises";
import openpgp from "openpgp";
import yargs from "yargs";
import path from "node:path";
import repo from "./express_route.js";

yargs(process.argv.slice(2)).version(false).help().demandCommand().strictCommands().alias("h", "help").option("cofig-path", {
  type: "string",
  default: process.cwd()+"/repoconfig.yml",
}).command("config", "maneger basics configs", async yargs => {
  return yargs.demandCommand().strictCommands().command("keys", "Generate PGP keys", async yargs => {
    const options = yargs.option("passphrase", {
      type: "string",
      default: "",
      alias: "p",
      demandOption: false,
    }).option("name", {
      type: "string",
      default: "",
      alias: "n",
      demandOption: true,
    }).option("email", {
      type: "string",
      default: "",
      alias: "e",
      demandOption: true,
    }).parseSync();

    const config = await getConfig(options.cofigPath);
    if (!options.email) throw new Error("email is required");
    if (!options.name) throw new Error("name is required");
    if (!options.passphrase) options.passphrase = undefined;
    const privatePath = path.resolve(path.dirname(options.cofigPath), "private.key");
    const publicPath = path.resolve(path.dirname(options.cofigPath), "public.key");
    const keys = await openpgp.generateKey({
      rsaBits: 4096,
      format: "armored",
      type: "rsa",
      passphrase: options.passphrase,
      userIDs: [{
        name: options.name,
        email: options.email,
        comment: "Generated by apt-stream"
      }],
    });
    if (!config["apt-config"]) config["apt-config"] = {};
    await writeFile(privatePath, keys.privateKey);
    await writeFile(publicPath, keys.publicKey);
    config["apt-config"].pgpKey = {passphrase: options.passphrase, private: privatePath, public: publicPath};
    console.log("PGP keys generated");
    // Private key
    console.log("Private Key:\n%s\n", keys.privateKey);
    // Public key
    console.log("Public Key:\n%s", keys.publicKey);
    await saveConfig(options.cofigPath, config);
    console.log("Config saved in '%s'", options.cofigPath);
  });
}).command("server", "Run HTTP serber", yargs => {
  const options = yargs.parseSync();
  return repo(options.cofigPath);
}).parseAsync();